{"version":3,"sources":["components/card/index.js","components/cardList/index.js","components/searchBox/index.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","searchField","type","value","onChange","App","useState","setMonsters","setSearchField","useEffect","a","fetch","json","users","console","log","filteredMonsters","filter","toLowerCase","includes","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAWeA,G,MARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCKLC,G,MARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,qBAAKP,UAAU,YAAf,SACCO,EAASC,KAAI,SAAAT,GAAO,OACb,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCOhBM,G,MAXG,SAAC,GAA8C,EAA5CC,YAA6C,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAC5C,OACI,uBACAZ,UAAU,SACVa,KAAK,SACLC,MAAOF,EACPF,YAAY,kBACZK,SAAUJ,MCuBHK,G,MA5BH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTV,EADS,KACCW,EADD,OAEsBD,mBAAS,IAF/B,mBAETL,EAFS,KAEIO,EAFJ,KAIhBC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEAC4BC,MAAM,6CADlC,8BACgFC,OADhF,OACOC,EADP,OAECC,QAAQC,IAAI,OACZR,EAAYM,GAHb,0CAAD,KAMA,IAEF,IAIMG,EAAmBpB,EAASqB,QAAO,SAAC7B,GAAD,OAAaA,EAAQK,KAAKyB,cAAcC,SAASlB,EAAYiB,kBAEtG,OADFJ,QAAQC,IAAI,UAER,sBAAK1B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,iBAAiBC,aATvB,SAACoB,GACpBZ,EAAeY,EAAEC,OAAOlB,QAQ8CF,YAAaA,IACjF,cAAC,EAAD,CAAUL,SAAUoB,SChBXM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13aa5c68.chunk.js","sourcesContent":["import React from 'react';\nimport './cardStyle.css';\n\nconst Card = ({ monster}) => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\n        <h2>{monster.name}</h2>\n        <p>{monster.email}</p>\n    </div>\n);\n\nexport default Card;","import React from 'react';\nimport Card from '../card';\nimport './cardListStyle.css';\n\nconst CardList = ({ monsters}) => (\n    <div className=\"card-list\">\n    {monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/>\n        ))}\n    </div>\n);\n\nexport default CardList;","import React from 'react'\nimport './searchBoxStyle.css';\n\nconst SearchBox = ({ placeholder, handleChange, searchField}) => {\n    return (\n        <input\n        className=\"search\"\n        type=\"search\"\n        value={searchField}\n        placeholder=\"search monsters\"\n        onChange={handleChange}/>\n    );\n}\n\nexport default SearchBox\n\n","import React, { useEffect, useState } from 'react';\nimport CardList from './components/cardList'\nimport SearchBox from './components/searchBox'\nimport './App.css';\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  useEffect(() => {\n    (async() => {\n      const users = await (await fetch('http://jsonplaceholder.typicode.com/users')).json();\n      console.log('wew')\n      setMonsters(users);\n    })();\n\n  },[])\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value)\n  }\n\n  const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()));\nconsole.log('render')\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search monster\" handleChange={handleChange} searchField={searchField}/>\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}